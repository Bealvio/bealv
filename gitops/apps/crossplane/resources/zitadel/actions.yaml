apiVersion: zitadel.didactiklabs.io/v1alpha1
kind: Action
metadata:
  name: mapgithuboauth
spec:
  forProvider:
    allowedToFail: true
    name: mapGitHubOAuth
    orgIdRef:
      name: bealv
    script: |
      /**
       * Set first and lastname of a user on just in time provisioning for github.
       * Useful if you like to fill the first and lastname with the name stored on github, so the user doesn't have to fill himself.
       *
       * Flow: External Authentication, Trigger: Post Authentication
       *
       * @param ctx
       * @param api
       */
      let logger = require("zitadel/log")
      let http = require('zitadel/http')
      function mapGitHubOAuth(ctx, api) {
        if (ctx.v1.externalUser.externalIdpId != "310301624205574694") {
          return
        }
        var accessToken = ctx.accessToken
        var emails = http.fetch('https://api.github.com/user/emails', {
            method: 'GET',
            headers: {
              'Authorization': 'token ' + ctx.accessToken,
              'Content-Type': 'application/json',
              'Accept': 'application/vnd.github+json',
        }}).json();
        var primaryEmail = emails.find(email => email.primary === true)?.email;
        logger.log('Github Email: ' + JSON.stringify(primaryEmail));
        api.setFirstName(ctx.v1.providerInfo.name);
        api.setLastName(ctx.v1.providerInfo.name);
        api.setEmail(primaryEmail);
        api.setEmailVerified(true);
      }
    timeout: 10s
---
apiVersion: zitadel.didactiklabs.io/v1alpha1
kind: Action
metadata:
  name: groupsclaim
spec:
  forProvider:
    allowedToFail: true
    name: groupsClaim
    orgIdRef:
      name: bealv
    script: |
      /**
       * Sets the roles as an additional claim in the token with "groups" as the key
       *
       * The role claims of the token will look like this:
       * "groups": ["monitoring_admin", "monitoring_editor"]
       *
       * Flow: Complement token, Triggers: Pre Userinfo creation, Pre access token creation
       */
      function groupsClaim(ctx, api) {
        if (ctx.v1.user.grants === undefined || ctx.v1.user.grants.count == 0) {
          return;
        }
        let grants = [];
        ctx.v1.user.grants.grants.forEach((claim) => {
          claim.roles.forEach((role) => {
            grants.push(role);
          });
        });
        api.v1.claims.setClaim("groups", grants);
      }
    timeout: 10s
---
apiVersion: zitadel.didactiklabs.io/v1alpha1
kind: Action
metadata:
  name: addadmingrant
spec:
  forProvider:
    allowedToFail: true
    name: addAdminGrant
    orgIdRef:
      name: bealv
    script: |
      /**
       * Add a usergrant to a new created/registered user
       *
       * Flow: Internal Authentication or External Authentication, Trigger: Post creation
       *
       * @param ctx
       * @param api
       */
      function addAdminGrant(ctx, api) {
        if (ctx.v1.authRequest.selectedIdpConfigId != "310301624205574694") {
            api.userGrants.push({
                projectID: '310416503256121894',
                roles: ['public-user']
            });
          return
        }
        api.userGrants.push({
            projectID: '310301928460386854',
            roles: ['bealv-admin']
        });
        api.userGrants.push({
            projectID: '310416503256121894',
            roles: ['public-admin', 'public-user']
        });
        api.userGrants.push({
            projectID: '339899635864699426',
            roles: ['kube-admin', 'kube-user']
        });
      }
    timeout: 10s
---
apiVersion: zitadel.didactiklabs.io/v1alpha1
kind: Action
metadata:
  name: setemailverified
spec:
  forProvider:
    allowedToFail: true
    name: setEmailVerified
    orgIdRef:
      name: bealv
    script: |
      /**
       * Set verified email of a user to true.
       * Useful if external identity provider doesn't send email verified attribute or you like to add all users with a verified email.
       *
       * Flow: Internal Authentication or External Authentication, Trigger: Pre Creation
       *
       * @param ctx
       * @param api
       */
      function setEmailVerified(ctx, api) {
          api.setEmailVerified(true)
      }
    timeout: 10s
---
